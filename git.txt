
  
.git
├── branches
├── COMMIT_EDITMSG
├── config
├── description
├── FETCH_HEAD
├── HEAD
├── hooks
│   ├── applypatch-msg.sample
│   ├── commit-msg.sample
│   ├── fsmonitor-watchman.sample
│   ├── post-update.sample
│   ├── pre-applypatch.sample
│   ├── pre-commit.sample
│   ├── pre-merge-commit.sample
│   ├── prepare-commit-msg.sample
│   ├── pre-push.sample
│   ├── pre-rebase.sample
│   ├── pre-receive.sample
│   └── update.sample
├── index
├── info
│   └── exclude
├── logs
│   ├── HEAD
│   └── refs
│       ├── heads
│       │   └── main
│       └── remotes
│           └── origin
│               └── main
├── 



│   ├── 6b
│   │   └── c68eae9cb8ba9c62d2115d64cc9fe4e457bfe9
│   ├── a3
│   │   └── 2a4c53bc242497e0aa95d81068bc95c6133133
│   ├── c8
│   │   └── 1e93eb85cf6108b97436d66de913995adf3357
│   ├── info
│   └── pack
└── refs
    ├── heads
    │   └── main
    ├── remotes
    │   └── origin
    │       └── main
    └── tags

(base) hanzt@hanzt:~/codes/docs$ git ls-files  // list all file in .git/Index 
README.md
git.txt


(base) hanzt@hanzt:~/codes/docs$ git ls-files -s
100644 c81e93eb85cf6108b97436d66de913995adf3357 0	README.md
100644 96e9497d8f559b95e3c12c631bc848c32ce12208 0	git.txt
--------------------------------------------------------------------
auth hash  filename

(base) hanzt@hanzt:~/codes/docs$  git cat-file -p c81e93eb85cf6108b97436d66de913995adf3357
#docs

        
(base) hanzt@hanzt:~/codes/docs$ git cat-file -t c81e    // view object type 
blob

(base) hanzt@hanzt:~/codes/docs$ git cat-file -p c81e    // view object content
#docs


commit:
(base) hanzt@hanzt:~/codes/docs$ cat .git/refs/heads/main 
1d9811c65311a5ed25aab85ee82ad0ab6cfb090b


(base) hanzt@hanzt:~/codes/docs$ git cat-file -p 1d98
tree 9607f3ede3f90375a120f62166dbcaff55014136
parent a32a4c53bc242497e0aa95d81068bc95c6133133
author hanzt <hanzt@hanzt> 1667102637 +0800
committer hanzt <hanzt@hanzt> 1667102637 +0800

add git.txt


(base) hanzt@hanzt:~/codes/docs$ git cat-file -p 9607f
100644 blob c81e93eb85cf6108b97436d66de913995adf3357	README.md
100644 blob 2477c72742f264e818457f05656c37985bb4651c	git.txt
(base) hanzt@hanzt:~/codes/docs$  


commit:(commit is a object too)
tree - > files
parent
author
committer
commit message


(base) hanzt@hanzt:~/codes/docs$ tree .git/
.git/
├── branches
├── COMMIT_EDITMSG
├── config
├── description
├── FETCH_HEAD
├── HEAD
├── hooks
│   ├── applypatch-msg.sample
│   ├── commit-msg.sample
│   ├── fsmonitor-watchman.sample
│   ├── post-update.sample
│   ├── pre-applypatch.sample
│   ├── pre-commit.sample
│   ├── pre-merge-commit.sample
│   ├── prepare-commit-msg.sample
│   ├── pre-push.sample
│   ├── pre-rebase.sample
│   ├── pre-receive.sample
│   └── update.sample
├── index
├── info
│   └── exclude
├── logs
│   ├── HEAD
│   └── refs
│       ├── heads
│       │   └── main
│       └── remotes
│           └── origin
│               └── main
├── 



│   ├── 1d
│   │   └── 9811c65311a5ed25aab85ee82ad0ab6cfb090b
│   ├── 24
│   │   └── 77c72742f264e818457f05656c37985bb4651c
│   ├── 6b
│   │   └── c68eae9cb8ba9c62d2115d64cc9fe4e457bfe9
│   ├── 96
│   │   ├── 07f3ede3f90375a120f62166dbcaff55014136
│   │   └── e9497d8f559b95e3c12c631bc848c32ce12208
│   ├── a3
│   │   └── 2a4c53bc242497e0aa95d81068bc95c6133133
│   ├── b6
│   │   └── dff291979e85b79a82a432badb7f99be765566
│   ├── c8
│   │   └── 1e93eb85cf6108b97436d66de913995adf3357
│   ├── info
│   └── pack
└── refs
    ├── heads
    │   └── main
    ├── remotes
    │   └── origin
    │       └── main
    └── tags


    branches: breanches are named pointers to commits.

    HEAD is a special pointer:
    1)Related with current active branch
    2)Always point to the latest commit

branch cmd:
    git branch; list all branches
    git branch <branch-name>  ; create a branch.
    git branch -D <branch-name>; delete a branch,it must not current activate branch.
    git checkout <branch-name>; change current branch to <branch-name>


    (base) hanzt@hanzt:~/codes/docs$ git branch
* main
(base) hanzt@hanzt:~/codes/docs$ git branch dev
(base) hanzt@hanzt:~/codes/docs$ git branch
  dev
* main
(base) hanzt@hanzt:~/codes/docs$ git log
commit 6627ef8c7e4e216b9a2a3800ed25db1b17f2a77b (HEAD -> main, dev)
Author: hanzt <hanzt@hanzt>
Date:   Sun Oct 30 13:26:39 2022 +0800

    4rd modify git.txt

commit ce9806d1f92c60636cf8a34c334ff8daaca5d583 (origin/main)
Author: hanzt <hanzt@hanzt>
Date:   Sun Oct 30 13:22:44 2022 +0800

    3rd modify git.txt

(base) hanzt@hanzt:~/codes/docs$ ls .git/refs/heads/
dev  main

(base) hanzt@hanzt:~/codes/docs$ cat .git/refs/heads/dev
6627ef8c7e4e216b9a2a3800ed25db1b17f2a77b


Switch branch to dev:

 (base) hanzt@hanzt:~/codes/docs$ cat .git/HEAD 
ref: refs/heads/main
(base) hanzt@hanzt:~/codes/docs$ git checkout dev
M	git.txt
Switched to branch 'dev'
(base) hanzt@hanzt:~/codes/docs$ cat .git/HEAD 
ref: refs/heads/dev
(base) hanzt@hanzt:~/codes/docs$ git log
commit 6627ef8c7e4e216b9a2a3800ed25db1b17f2a77b (HEAD -> dev, main)
Author: hanzt <hanzt@hanzt>
Date:   Sun Oct 30 13:26:39 2022 +0800

    4rd modify git.txt

commit ce9806d1f92c60636cf8a34c334ff8daaca5d583 (origin/main)
Author: hanzt <hanzt@hanzt>
Date:   Sun Oct 30 13:22:44 2022 +0800

    3rd modify git.txt

commit e3eecdcbc4d295572a61fffc1edd942fbabd8f3a
Author: hanzt <hanzt@hanzt>
Date:   Sun Oct 30 12:46:15 2022 +0800

    modify 2rd git.txt
 





git checout a commit:

(base) hanzt@hanzt:~/codes/docs$ git checkout a32a4c
Note: switching to 'a32a4c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at a32a4c5 first commit
(base) hanzt@hanzt:~/codes/docs$ git log
commit a32a4c53bc242497e0aa95d81068bc95c6133133 (HEAD)
Author: hanzt <hanzt@hanzt>
Date:   Sun Oct 30 10:23:23 2022 +0800

    first commit

create a new branch on checkout commit:
(base) hanzt@hanzt:~/codes/docs$ git checkout -b tmp
Switched to a new branch 'tmp'
(base) hanzt@hanzt:~/codes/docs$ git log
commit a32a4c53bc242497e0aa95d81068bc95c6133133 (HEAD -> tmp)
Author: hanzt <hanzt@hanzt>
Date:   Sun Oct 30 10:23:23 2022 +0800

    first commit

git reflog:
(base) hanzt@hanzt:~/codes/docs$ git reflog
a32a4c5 (HEAD -> tmp) HEAD@{0}: checkout: moving from a32a4c53bc242497e0aa95d81068bc95c6133133 to tmp
a32a4c5 (HEAD -> tmp) HEAD@{1}: checkout: moving from main to a32a4c
6627ef8 (main) HEAD@{2}: checkout: moving from dev to main
978b86f (dev) HEAD@{3}: checkout: moving from main to dev
6627ef8 (main) HEAD@{4}: checkout: moving from dev to main
978b86f (dev) HEAD@{5}: commit: add docker.txt
6627ef8 (main) HEAD@{6}: checkout: moving from main to dev
6627ef8 (main) HEAD@{7}: commit: 4rd modify git.txt
ce9806d (origin/main) HEAD@{8}: commit: 3rd modify git.txt
e3eecdc HEAD@{9}: commit: modify 2rd git.txt
98e78f7 HEAD@{10}: commit: modify 1st git.txt
1d9811c HEAD@{11}: commit: add git.txt
a32a4c5 (HEAD -> tmp) HEAD@{12}: Branch: renamed refs/heads/master to refs/heads/main
a32a4c5 (HEAD -> tmp) HEAD@{14}: commit (initial): first commit
(base) hanzt@hanzt:~/codes/docs$ 



git diff // diff of index vs working
git diff --cached // diff of index vs reposity


git gc  //compress data of 




git prune


(base) hanzt@hanzt:~/codes/docs$ git prune -n
4dde549b99410f0c3e32bdaf1dc4e5ba54220b4a blob
6dad8b8904fd794800cd4d617784b9057ac8098d blob
96e9497d8f559b95e3c12c631bc848c32ce12208 blob
b6dff291979e85b79a82a432badb7f99be765566 blob

(base) hanzt@hanzt:~/codes/docs$ git fsck
Checking object directories: 100% (256/256), done.
dangling blob 4dde549b99410f0c3e32bdaf1dc4e5ba54220b4a
dangling blob 96e9497d8f559b95e3c12c631bc848c32ce12208
dangling blob 6dad8b8904fd794800cd4d617784b9057ac8098d
dangling blob b6dff291979e85b79a82a432badb7f99be765566


git merge --fast forwad

merge dev to master
1)git checkout master
2)git merge dev 

git merge ---3 way merge


git log --graph


git rebase
